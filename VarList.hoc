//
// TODO graphical function for saving files using "chooser()" ?
// 

load_file("FormatFile.hoc")

begintemplate DoubleVar

public name, ptr, type, action
public printf, fprint

strdef name, tmpstr, action
objref ptr

// new Var("name")
proc init() {
    sprint(name,"%s",$s1)
    ptr = new Pointer(name)
    if (numarg() >= 2) {
        sprint(action,"%s",$s2)
    }
}

proc printf() {
    print name, " = ", ptr.val
}
proc fprint() {
    $o1.printdouble(name, ptr.val)
}
endtemplate DoubleVar


begintemplate StringVar

public name, ptr,  type, str, action
public printf, fprint

strdef name, cmd, str, action
objref this

// new Var("name")
proc init() {
    sprint(name,"%s",$s1)
    if (numarg() >= 2) {
        sprint(action,"%s",$s2)
    }
}

proc printf() {
    sprint(cmd,"%s.str = %s",this, name)
    execute1(cmd) 
    print name, " = ", str
}

proc fprint() {
    sprint(cmd,"%s.str = %s",this, name)
    execute1(cmd) 
    $o1.printstr(name,str)    
}

endtemplate StringVar


begintemplate VarList

public append
public appendDouble, appendSetDouble 
public appendString, appendSetString
public printf, printf_actions, fprint, fprint_actions
public save, load
public execute_actions
public l

objref l, f, this, ldfile
strdef tmpstr

// new Var("name")
proc init() {
    l = new List()
}

// Can't use name "print"
proc append() {
    l.append($o1)
}

proc appendDouble() {
    if ( numarg() >= 2 ) {
        l.append(new DoubleVar($s1,$s2))
    } else {
        l.append(new DoubleVar($s1))
    }
}
    

proc appendSetDouble() {
    sprint(tmpstr,"%s = %g",$s1, $2)
    execute1(tmpstr)
    if ( numarg() >= 3 ) {
        appendDouble($s1,$s3)
    } else {
        appendDouble($s1)
    }
}


proc appendString() {
    if ( numarg() >= 2 ) {
        l.append(new StringVar($s1,$s2))
    } else {
        l.append(new StringVar($s1))
    }        
}

proc appendSetString() {
    sprint(tmpstr, "strdef %s", $s1)
    execute(tmpstr)
    sprint(tmpstr,"%s = \"%s\"",$s1, $s2)
    execute(tmpstr)
    if ( numarg() >= 3 ) {
        appendString($s1,$s3)
    } else {
        appendString($s1)
    }        
}

proc printf() { local i
    for i= 0, l.count()-1 { l.object(i).printf() } 
}

proc printf_actions() { local i
    for i= 0, l.count()-1 { print l.object(i).action } 
}

// fprint(FormatFile f)
proc fprint() { local i
    for i= 0, l.count()-1 { l.object(i).fprint($o1) } 
}

proc fprint_actions() { local i
    for i= 0, l.count()-1 { $o1.printf("%s\n",l.object(i).action) } 
}

proc execute_actions() { local i
    for i= 0, l.count()-1 { execute(l.object(i).action) } 
}

proc save() {
    if (numarg() == 0) {
        f = new FormatFile("","hoc")
        f.chooser("w","Save Parameters to file","*.hoc")
        f.chooser()
    } else {
        f = new FormatFile($s1,"hoc")
    }
    f.wopen()
    fprint(f)
    fprint_actions(f)
    f.close()
}

// Procedure to load from file adapted from stdrun.hoc
proc load() {
	if (object_id(ldfile) == 0) {
		ldfile = new File()
	}
	ldfile.chooser("r", "Load", "*.hoc", "Load", "Cancel", getcwd())
	if (ldfile.chooser()) {
			load_file(1, ldfile.getname)
	}
}

endtemplate VarList