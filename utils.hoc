if (name_declared("pkgversions") != 4 ) { execute("strdef pkgversions") } 
sprint(pkgversions,"%sutils = $Revision: 1.19 $, ",pkgversions)

begintemplate Utils

public error
public min, max
public mean, stdev
public mul_ratio_round

//
// error(String error) 
//
// Issue error string and stop simulation
//

proc error() {
    print $s1
    stop
}

//
// x = min(double a, double b)
// 
// return minimum of a and b
//

func min() {
    if ( $1 < $2 ) { return $1 } else { return $2 }
}

//
// x = max(double a, double b)
// 
// return maximum of a and b
//

func max() {
    if ( $1 > $2 ) { return $1 } else { return $2 }
}

//
// mean(Matrix src, Vector mean) 
// 
// Compute mean of columns of src storing output in mean
// 
proc mean() { local i
    $o2 = new Vector($o1.ncol())
    for i=0, $o1.ncol()-1 {
        $o2.x(i) = $o1.getcol(i).mean()
    }
}

//
// mean(Matrix src, Vector mean) 
// 
// Compute mean of columns of src storing output in mean
// 
proc stdev() { local i
    $o2 = new Vector($o1.ncol())
    for i=0, $o1.ncol()-1 {
        if ($o1.getcol(i).size > 1) {
            $o2.x(i) = $o1.getcol(i).stdev()
        } else {
            $o2.x(i) = 0
        }
    }
}

//
// mul_ratio_round(Vector out, int n, Vector ratio) 
// Return a vector OUT whose elements sum to N and are approximately in the ratio RATIO
// 
objref ratio, out, out_floor, out_rem, si
proc mul_ratio_round() { local n, i
    n     = $2
    ratio = $o3
    out   = ratio.c()
    out.mul(n/ratio.sum())
    out_rem = out.c
    out.floor()
    out_rem.sub(out)
    si = out_rem.sortindex()
    i = si.size()
    while(out.sum() < n) {
        i = i - 1
        out.x(si.x(i)) = out.x(si.x(i)) + 1
    }
    $o1 = out
}

endtemplate Utils

objref utils
utils = new Utils()