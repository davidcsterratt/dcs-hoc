if (name_declared("pkgversions") != 4 ) { execute("strdef pkgversions") } 
sprint(pkgversions,"%sutils = $Revision: 1.14 $, ",pkgversions)

//
// error(String error) 
//
// Issue error string and stop simulation
//

proc error() {
    print $s1
    stop
}

//
// x = min(double a, double b)
// 
// return minimum of a and b
//

func min() {
    if ( $1 < $2 ) { return $1 } else { return $2 }
}

//
// x = max(double a, double b)
// 
// return maximum of a and b
//

func max() {
    if ( $1 > $2 ) { return $1 } else { return $2 }
}

//
// mean(Matrix src, Vector mean) 
// 
// Compute mean of columns of src storing output in mean
// 
proc mean() { local i
    $o2 = new Vector($o1.ncol())
    for i=0, $o1.ncol()-1 {
        $o2.x(i) = $o1.getcol(i).mean()
    }
}

//
// mean(Matrix src, Vector mean) 
// 
// Compute mean of columns of src storing output in mean
// 
proc stdev() { local i
    $o2 = new Vector($o1.ncol())
    for i=0, $o1.ncol()-1 {
        $o2.x(i) = $o1.getcol(i).stdev()
    }
}

//
// integral(Vector y, Vector x)
//
// Numerical integration using trapezoid rule
//

begintemplate Integrator
public integrate

objref x0, x1, ybar, dx

proc init() {
    x0 = new Vector()
    x1 = new Vector()
    dx = new Vector()
    ybar = new Vector()
}

func integrate () {
    x0.indgen(0, $o2.size()-2,1)
    x1.indgen(1, $o2.size()-1,1)
    ybar = $o1.ind(x0) 
    ybar.add($o1.ind(x1))
    dx.deriv($o2,1,1) 
    return ybar.dot(dx)/2
}

endtemplate Integrator

// 
// object_is(objref obj, String classname)
// 
begintemplate ObjectClass
public object_is
public objrefid, objind, objid
strdef tmpstr
objref this
proc init() {
    objrefid = 0
    objind = 0
    objid = 0
}
func object_is() {
    sprint(tmpstr,"%s.objrefid = object_id(%s)",this,$s1)
    execute(tmpstr)
    sprint(tmpstr,"%s.objind = object_id(%s,1)",this,$s1)
    execute(tmpstr)
    sprint(tmpstr, "%s.objid = object_id(%s[%g])",this,$s2,objind)
    execute(tmpstr)
    return (objid == objrefid)
}
endtemplate ObjectClass


